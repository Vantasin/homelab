#!/bin/bash
set -euo pipefail

# Logging functions for consistent output formatting
log_info() {
  echo -e "\e[32m[INFO]\e[0m $1"
}

log_error() {
  echo -e "\e[31m[ERROR]\e[0m $1" >&2
}

# Check if the script is run as root
check_root() {
  if [ "$EUID" -ne 0 ]; then
    log_error "Please run as root (use sudo)"
    exit 1
  fi
}

# Set the base and backup directories and ensure backups exist
setup_directories() {
  BASE_DIR="{{ docker_dir }}/{{ stack.name }}"
  BACKUP_DIR="$BASE_DIR/data/library/backups"
  
  if [ ! -d "$BACKUP_DIR" ]; then
    log_error "Backup directory '$BACKUP_DIR' does not exist."
    exit 1
  fi

  # Find backup files (if none, exit)
  shopt -s nullglob
  backup_files=("$BACKUP_DIR"/*.sql.gz)
  shopt -u nullglob
  {% raw %}
  if [ ${#backup_files[@]} -eq 0 ]; then
    log_error "No backup files found in '$BACKUP_DIR'."
    exit 1
  fi
  {% endraw %}
}

# Extract a friendly date from the file's creation time (or modification time if necessary)
get_friendly_date() {
  local file="$1"
  # Try to get the creation (birth) time using GNU stat (%w).
  creation_date=$(stat -c %w "$file")
  # If creation_date is "-" or empty, fallback to the modification time (%y).
  if [ "$creation_date" = "-" ] || [ -z "$creation_date" ]; then
    creation_date=$(stat -c %y "$file")
  fi
  # Extract just the date portion (first 10 characters: YYYY-MM-DD)
  local date_part=${creation_date:0:10}
  # Reformat the date to DD-MM-YYYY using the date command.
  friendly_date=$(date -d "$date_part" +'%d-%m-%Y')
  echo "$friendly_date"
}

# Present the backup selection menu with clear instructions and friendly aliases based on file creation date
select_backup() {
  log_info "Please select a backup file from the list below."
  echo "Enter the number corresponding to the backup you wish to restore."
  echo "If you don't see your desired backup, ensure that the file exists in:"
  echo "  $BACKUP_DIR"
  echo "-----------------------------------------------"

  # Create an array of friendly names based on the creation date of each file.
  friendly_names=()
  for file in "${backup_files[@]}"; do
    friendly_date=$(get_friendly_date "$file")
    friendly_names+=("Immich Backup $friendly_date")
  done

  # Use the select command to let the user choose from the friendly names.
  PS3="Enter your choice (number): "
  select option in "${friendly_names[@]}"; do
    if [ -n "${option:-}" ]; then
      # Map the selection to the corresponding backup file.
      index=$((REPLY - 1))
      BACKUP_FILE="${backup_files[$index]}"
      log_info "You selected: ${friendly_names[$index]}"
      break
    else
      log_error "Invalid selection. Please enter the number corresponding to your chosen backup."
    fi
  done
}

# Perform Docker operations and restore the backup
restore_backup() {
  log_info "Stopping Docker containers and removing volumes..."
  docker compose down -v

  log_info "Removing Postgres data directory..."
  rm -rf "$BASE_DIR/data/postgres"

  log_info "Pulling the latest Docker images..."
  docker compose pull
  
  log_info "Creating Docker containers..."
  docker compose create

  log_info "Starting the Postgres container..."
  docker start immich_postgres

  log_info "Waiting for Postgres to become ready..."
  local max_wait=30
  local wait_time=0
  until docker exec immich_postgres pg_isready -U postgres >/dev/null 2>&1 || [ $wait_time -ge $max_wait ]; do
    sleep 2
    wait_time=$((wait_time + 2))
  done

  if ! docker exec immich_postgres pg_isready -U postgres >/dev/null 2>&1; then
    log_error "Postgres did not become ready in time."
    exit 1
  fi

  log_info "Restoring backup from file: $BACKUP_FILE"
  gunzip < "$BACKUP_FILE" \
    | sed "s/SELECT pg_catalog.set_config('search_path', '', false);/SELECT pg_catalog.set_config('search_path', 'public, pg_catalog', true);/g" \
    | docker exec -i immich_postgres psql --dbname=postgres --username={{ DB_USERNAME }}

  log_info "Starting remaining Docker services..."
  docker compose up -d
  log_info "Immich services have been started successfully."
}

# Main function to coordinate the script's execution
main() {
  check_root
  setup_directories
  select_backup
  restore_backup
}

# Execute the main function
main
